let db_name="RR_indexeddb",db_objectstore_name="RestaurantsInfo";self.onmessage=(e=>{switch(e.data[1]){case"AddingRestaurants":addRestaurants(e.data[0]);break;case"GettingRestaurants":getRestaurantsWhenYouGoOffline();break;case"saveReviews":saveReviews(e.data[0])}}),addRestaurants=(e=>{if(self.indexedDB){let t=self.indexedDB.open(db_name,"1");t.onerror=(e=>{console.log(e)}),t.onupgradeneeded=(t=>{let o=t.target.result;o.createObjectStore(db_objectstore_name,{keyPath:"id"}).transaction.oncomplete=(t=>{let s=o.transaction([db_objectstore_name],"readwrite").objectStore(db_objectstore_name);e.forEach(e=>{console.log(e),s.put(e).onsuccess=(e=>{console.log("Addded"+e)})})})}),console.log("Browser supports indexeddb feature")}else console.log("Browser doesnt support indexeddb faeture")}),getRestaurantsWhenYouGoOffline=(()=>{if(self.indexedDB){let e=self.indexedDB.open(db_name,"1");e.onerror=(e=>{console.log("Inside catch block",e)}),e.onsuccess=function(e){let t=e.target.result.transaction([db_objectstore_name],"readonly").objectStore(db_objectstore_name).getAll();t.onsuccess=(()=>{postMessage(t.result)})},console.log("Browser supports indexeddb feature")}else console.log("Browser doesnt support indexeddb feature")}),saveReviews=(e=>{if(console.log("inside save"),self.indexedDB){let t=self.indexedDB.open("review_db","2");t.onerror=(e=>{console.log(e)}),t.onupgradeneeded=(t=>{let o=t.target.result,s=o.createObjectStore("reviewStore",{keyPath:"id",autoIncrement:!0});s.createIndex("restaurant_id","restaurant_id"),s.transaction.oncomplete=(t=>{let s=o.transaction("reviewStore","readwrite").objectStore("reviewStore");e.forEach(e=>{s.put(e).onsuccess=(e=>{})})})}),t.onsuccess=(t=>{let o=t.target.result.transaction("reviewStore","readwrite").objectStore("reviewStore");e.forEach(e=>{o.put(e).onsuccess=(e=>{})})}),console.log("Browser supports indexeddb feature")}else console.log("Browser doesnt support indexeddb faeture")});